---
layout: post
title:  "Моё понимание asyncio.!"
date:   2017-09-04 21:57:21 +0300
categories: jekyll update
---
Моё понимание
Я хотел бы найти книги, чтобы asyncio был описан не как сухая документация, а полноценные приемы, а еще лучше несколько полноценных приёмов работы с их постепенным усложнением. А для каждого приёма были бы изложены плюсы и минусы и ситуации в каких её использовать 

Изучение сводится:
- Главы 16-18 Fluent Python. (здесь описана эволюция от синтаксиса генераторов к сопрограммам, но нового ситаксиса с async/await нет
- документация asyncio
- статьи
    - https://habrahabr.ru/post/337420/


Основное, что нужно осознать, чтобы вникнуть в асинхронное программирование с помощью asyncio - это что код будет выполняться не последовательно.
 
 Существует цикл обработки событий, который периодически включает то одну задачу, то другую. 
 Сам процесс переключения происходит "по желанию" изнутри этих задач (операция yield) - что называется непринудительным переключением, в отличие от переключения при работе с потоками, где переключение происходит принудительно и может привести к необжиданным последовательностям.
 
 Нужно учитывать, что синтаксис написания эволюционировал, и например из синтаксиса, с декораторами @async.coroutine / yield from превратился в async / await
 
 Основные понятия, которыми нужно оперировать.
 
 Цикл обработки событий -
 Корутина - процедура работающая некоторое время и на время ожидания (I/O, sleep, HTTP запросы), передающая управление в основной цикл
 Future - объект, который хранит в себе состояние Корутины - в нем можно получить результат, состояние, повторно возбудить исключение.
 
 
 
 Пример того, что внутри корутины неверно определен внутренние корутины, которые ждут результата предыдущей,
 
 {% highlight python %}
     async def async_download2():
        for i, url in enumerate(URLS):
            async with aiohttp.request('GET', url) as response:
                print(response)
 {% endhighlight %}
 
  их нужно оборачивать в такси и передавать на выполнение
  
 {% highlight python %}
    async def async_download_url(url):
        start = datetime.datetime.now()
        print('start', start)
        with aiohttp.ClientSession() as async_session:
            async with async_session.request("GET", url) as response:
                # response.close()
                # print(response)
                print('end', datetime.datetime.now() - start)

    async def async_download():
        tasks = [asyncio.tasks.Task(async_download_url(url)) for i, url in enumerate(URLS)]
        await asyncio.wait(tasks)
{% endhighlight %}

 
 
{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
